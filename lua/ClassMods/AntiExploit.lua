--Kyle 'Avoca' Abent

--Anti Exploit--------------------------------------

/*
Spawning cysts nearby front doors when theyre closed == kill
Spawning something inside siege when its closed and having it build == kill
same with teleporting :P


prevent macs/arcs from going through doors.. and add timer when they're created to make sure robo wasnt exploited either
*/

local constorig = ConstructMixin.OnConstructionComplete

function ConstructMixin:OnConstructionComplete(builder)
  constorig(self, builder)
  if Server then ExploitCheck(self) end
end    

local cystorig = Cyst.OnInitialized

function Cyst:OnInitialized()
  cystorig(self)
  if Server then ExploitCheck(self) end
end    

local contorig = Contamination.OnInitialized

function Contamination:OnInitialized()
  contorig(self)
  if Server then ExploitCheck(self) end
end    

local eggorig = Contamination.OnInitialized

--Rather than take from teleportmixin... which isnt used..
local repoorig =  RepositioningMixin.OnTeleportEnd
function RepositioningMixin:OnTeleportEnd()
  repoorig(self)
  if Server then ExploitCheck(self) end
end    

local function OnRolloutTimeout(self)
 if Server then ExploitCheck(self) end
    return false
end

local rollorig =  RolloutMixin.Rollout
function RolloutMixin:Rollout(factory, factoryRolloutLength)
  rollorig(self, factory, factoryRolloutLength)
   self:AddTimedCallback(OnRolloutTimeout, 12)
end    


/*

local pathorigi = PathingMixin.CheckTarget

function PathingMixin:CheckTarget(endPoint)
 
  pathorigi(self, endPoint) 
    local trace = Shared.TraceRay(self:GetOrigin(),  endPoint, CollisionRep.Move, PhysicsMask.Movement, EntityFilterAllButMixin("BaseModelMixin"))                                                                                                                                                                                                                                                                            
      if trace.entity ~= nil  and ( trace.entity:isa("FrontDoor") or trace.entity:isa("SiegeDoor") ) and 
               ( trace.entity:GetOrigin() ==  trace.entity.savedOrigin ) then 
        return false
     end
     

end    

*/

--lazy
function PathingMixin:CheckTarget(endPoint)

    // if we don't have a cursor, or the targetPoint differs, create a new path
    if self.cursor == nil or (self.targetPoint - endPoint):GetLengthXZ() > 0.1 then
    
        // our current cursor is invalid or pointing to another endpoint, so build a new one
        self.points = GeneratePath(self:GetOrigin(), endPoint, false, 0.5, 2, self:GetIsFlying())
        if self.points == nil then
        
            // Can't reach the endPoint.
            return false
            
        end
        self.targetPoint = endPoint
        // the list of points does not include our current origin. Simplify the remaining code
        // by adding our origin to the list of points
        Pathing.InsertPoint( self.points, 1, self:GetOrigin() )
        
        self.cursor = PathCursor():Init(self.points)
        
    end    
    local trace = Shared.TraceRay(self:GetOrigin(),  endPoint, CollisionRep.Move, PhysicsMask.Movement, EntityFilterAllButIsa("SiegeDoor") )                                                                                                                                                                                                                                                                            
      if trace.entity ~= nil and trace.entity:GetIsLocked() then 
        return false
     end
  
  return true
    
end





---------------------------------------------------------------